<!DOCTYPE html>
<html lang="en" style="height:100%;width:100%;">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ephm</title>

    <!-- Primary Meta Tags -->
    <meta name="title" content="Ephm">
    <meta name="description" content="Ephemeral Chat App by Rami Awar">

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://ephm.herokuapp.com/">
    <meta property="og:title" content="Ephm">
    <meta property="og:description" content="Ephemeral Chat App by Rami Awar">

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="https://ephm.herokuapp.com/">
    <meta property="twitter:title" content="Ephm">
    <meta property="twitter:description" content="Ephemeral Chat App by Rami Awar">

    <link href="/static/css/out.css" rel="stylesheet"/>
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css">
</head>
<body class="absolute inset-0 bg-gradient-to-b from-sky-500 to-sky-600 flex justify-center">
    <div class="flex-1 flex flex-col inset-0 max-w-6xl">

        <div class="flex flex-col sm:grid sm:grid-cols-4 h-full">
            <div class="flex flex-col">
                <div class="flex flex-row items-center justify-between m-3 mb-0 px-5 ">
                    <div class="text-3xl font-extrabold text-white flex items-center space-x-2">
                        <div>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div>Ephm</div>
                    </div>
                    <div class="flex flex-row items-center space-x-10">
                        <span class="relative inline-block sm:hidden group">
                            <svg class="w-6 h-6 text-white fill-current" viewBox="0 0 20 20"><path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z" /></svg>
                            <span id="n_online_users" class="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-black leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-yellow-400 rounded-full"></span>
                            <div class="absolute -bottom-2 transform translate-y-full -translate-x-9 flex-col items-center hidden group-hover:flex group-focus:flex">
                                <div class="w-3 h-3 rotate-45 rounded-sm bg-yellow-400"></div>
                                <ul id="mobile_userlist" class="relative rounded-md flex flex-col items-center justify-center -mt-2 z-10 p-3 w-24 text-xs leading-none text-white whitespace-no-wrap bg-yellow-400 shadow-lg">
                                </ul>
                            </div>
                        </span>
                        <div id="status" class="sm:hidden text-green-300"></div>
                    </div>
                </div>
                <div class="hidden sm:visible mx-3 px-5 text-md font-extralight text-white">Ephemeral Chat App</div>
                <div class="hidden sm:flex rounded-lg mx-3 mb-3 px-5 w-max-45 grow flex-col border-gray-200">
                    <div class="flex sm:items-center py-3">
                        <div class="flex items-center w-full">
                        <div class="flex flex-col w-full">
                            <div class="text-xl mt-1 flex items-center justify-between">
                                <span class="font-bold text-white">Users</span>
                                <div id="status" class="text-green-300">
                                </div>
                            </div>
                        </div>
                        </div>
                    </div>

                    <ul id="userlist" class="">
                        <li class="hidden items-center rounded-lg p-2 hover:bg-gray-200 bg-red-300 bg-sky-200 bg-blue-300 bg-indigo-300 bg-rose-300 bg-fuchsia-300 bg-violet-300 bg-cyan-300 bg-lime-300 bg-orange-300 transition-colors">
                            <div class="flex items-center justify-center h-8 w-8 bg-green-200 rounded-full">R</div>
                            <span class="pl-3">Rami</span>
                        </li>
                    </ul>
                </div>
            </div>

            <div id="messages" class="grow bg-white rounded-4xl m-3 col-span-4 sm:col-span-3 flex sm:grow-0 flex-col justify-end space-y-4 p-3 overflow-y-auto">
                
                <div id="chat" class="overflow-y-auto scrollbar-thumb-blue scrollbar-thumb-rounded scrollbar-track-blue-lighter scrollbar-w-2 scrolling-touch">
                </div>

                <div>
                    <div class="border-t-2 border-gray-200 px-4 pt-4 mb-2 sm:mb-0">
                    <div class="relative flex">
                        <input type="text" id="message" placeholder="Message" class="w-full focus:outline-none focus:placeholder-gray-400 text-gray-600 placeholder-gray-600 pl-8 bg-gray-200 rounded-full py-3">
                        <div class="absolute right-0 items-center inset-y-0 sm:flex">
                            <button type="button" id="send_button" class="inline-flex items-center justify-center rounded-full h-12 w-12 transition duration-500 ease-in-out text-white bg-blue-500 hover:bg-blue-400 focus:outline-none">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-6 w-6 transform rotate-90">
                                <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Username Modal -->
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="overlay">
        <div class="relative top-1/3 mx-auto p-5 border w-64 sm:w-72 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="mt-3 text-lg leading-6 font-medium text-gray-900">Enter name</h3>
                <div class="mt-2 px-7 py-3">
                    
                </div>
                <div>
                    <div class="mt-1 relative rounded-md shadow-sm">
                      <input type="text" name="username" id="username" class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md" placeholder="Name">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/static/js/reconnecting_websocket.js"></script>
<script>

    let socket = null;
    let online_status = `<svg xmlns="http://www.w3.org/2000/svg" class="text-white h-8 w-8" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>`
    let offline_status = `<svg xmlns="http://www.w3.org/2000/svg" class="text-white h-8 w-8" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" /></svg>`

    let initialized = false;
    let name = "";

    function onlyLettersAndSpaces(str) {
        return /^[A-Za-z\s]*$/.test(str);
    }

    let COLORS = ["red", "orange", "indigo", "lime", "fuchsia", "rose"];
    function randomColor(){
        return COLORS[Math.floor(Math.random() * COLORS.length)]
    }

    function initializeWebsockets(){
        socket = new ReconnectingWebSocket("{{.SocketProtocol}}://{{.Host}}/connect", null, {reconnectInterval: 1000});
        
        socket.onopen = () => {
            console.log("Connection successful")
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = username.value;
            socket.send(JSON.stringify(jsonData));

            socket.send(JSON.stringify({"action": "get_users"}))
            document.getElementById("status").innerHTML = online_status;
        }

        socket.onclose = () => {
            console.log("Connection closed")
            document.getElementById("status").innerHTML = offline_status;
        }

        socket.onerror = error => {
            console.log("Socket error: ", error)
            document.getElementById("status").innerHTML = offline_status;
        }


        socket.onmessage = msg => {
            let data = JSON.parse(msg.data);

            switch (data.action) {
                case "list_users":
                    let ul = document.getElementById("userlist");
                    let ul2 = document.getElementById("mobile_userlist");

                    // Empty list
                    while (ul.firstChild) ul.removeChild(ul.firstChild);
                    while (ul2.firstChild) ul2.removeChild(ul2.firstChild);

                    // Set n users badge
                    document.getElementById("n_online_users").innerHTML = data.connected_users.length;

                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach( item => {
                            let color = randomColor();
                            let el = `<li class="flex font-semibold items-center rounded-lg p-2 mb-2 hover:bg-sky-400 text-white transition-colors duration-300">
                                        <div class="flex items-center justify-center h-8 w-8 bg-${color}-300 rounded-full">${item.charAt(0).toUpperCase()}</div>
                                        <span class="pl-3 text-white">${item}</span></li>`;

                            let el2 = `<li class="m-1 text-sm text-white font-bold">${item}</li>`
                    
                            var htmlObject = document.createElement('div');
                            htmlObject.innerHTML = el;
                            ul.appendChild(htmlObject);

                            var obj = document.createElement('div');
                            obj.innerHTML = el2;
                            ul2.appendChild(obj);
                        })
                    }
                    break;
                
                case "broadcast":
                    let child;
                    if(data.user == name){
                        child = `<div class="chat-message my-1">
                                    <div class="flex items-end justify-end">
                                        <div class="flex flex-col space-y-2 text-xs max-w-xs mx-2 order-1 items-end">
                                            <div><span class="px-4 py-2 rounded-lg inline-block rounded-br-none bg-blue-500 text-white text-sm">${data.message}</span></div>
                                        </div>
                                    </div>
                                </div>`;
                    }else{
                        child = `<div class="chat-message my-1">
                                    <div class="flex items-end">
                                        <div class="flex flex-col space-y-2 text-xs max-w-xs mx-2 order-2 items-start">
                                            <div><span class="px-4 py-2 rounded-lg inline-block rounded-bl-none bg-gray-200 text-gray-600">
                                                <div class="user text-sm">${data.user}</div>
                                                <div class="message text-sm">${data.message}</div>
                                            </span></div>
                                        </div>
                                    </div>
                                </div>`;
                    }
                    
                    var htmlObject = document.createElement('div');
                    htmlObject.innerHTML = child;
                    let chat = document.getElementById("chat");
                    chat.appendChild(htmlObject);
                    chat.scrollTop = chat.scrollHeight;
                    break;

            }
        }
    }


    window.onbeforeunload = () => {
        let jsonData = {"action": "left"};
        socket.send(JSON.stringify(jsonData));
    }

    document.addEventListener("DOMContentLoaded", function(){

        let overlay = document.getElementById("overlay");
        let username = document.getElementById("username");

        window.onkeydown = function(event) {
            if(!initialized && (event.keyCode == 9 || event.keyCode == 13)) {
                if(username.value != "" && onlyLettersAndSpaces(username.value)) {
                    // Initialize sockets and send username
                    name = username.value;
                    initializeWebsockets()
                    initialized = true;
                    overlay.style.display = "none";
                }
            }
        }
    })

    document.getElementById("send_button").addEventListener("click", function(event){
        if(socket && document.getElementById("message").value != ""){
            event.preventDefault();
            event.stopPropagation();
            sendMessage();
            return true;
        }
        return false;
    })

    document.getElementById("message").addEventListener("keydown", function(event){
        if(event.code == "Enter"){
            if(socket && document.getElementById("message").value != ""){
                event.preventDefault();
                event.stopPropagation();
                sendMessage();
                return true;
            }
            return false;
        }
    })

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = name;
        jsonData["message"] = document.getElementById("message").value;
        socket.send(JSON.stringify(jsonData))
        
        // Clear message
        document.getElementById("message").value = ""
    }
    
</script>

</body>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

</html>