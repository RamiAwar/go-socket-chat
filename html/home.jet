<!DOCTYPE html>
<html lang="en" style="height:100%;width:100%;">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <link href="/static/css/out.css" rel="stylesheet"/>
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css">
</head>
<body style="height:100%;width:100%;" class="bg-gray-300">
    <div class="flex-1 flex flex-col h-screen">

        <div class="grid grid-cols-4 h-full">
            <div class="flex flex-col">
                <div class="m-3 px-5 text-2xl font-black ">Go Chat</div>
                <div class="bg-white rounded-lg mx-3 mb-3 px-5 w-max-45 flex grow flex-col border-gray-200">
                    <div class="flex sm:items-center py-3">
                        <div class="flex items-center w-full">
                        <div class="flex flex-col w-full">
                            <div class="text-xl mt-1 flex items-center justify-between">
                                <span class="font-bold text-gray-700">Friends</span>
                                <div id="status" class="text-green-600">
                                </div>
                            </div>
                        </div>
                        </div>
                    </div>

                    <ul id="userlist" class="">
                        <li class="hidden items-center rounded-lg m-1 p-1 hover:bg-gray-200 bg-red-200 bg-blue-200 bg-indigo-200 bg-rose-200 bg-fuchsia-200 bg-violet-200 bg-cyan-200 bg-lime-200 bg-orange-200 transition-colors">
                            <div class="flex items-center justify-center h-8 w-8 bg-green-200 rounded-full">R</div>
                            <span class="pl-3">Rami</span>
                        </li>
                    </ul>
                </div>
            </div>

            <div id="messages" class="bg-white rounded-lg m-3 col-span-3 flex flex-col justify-end space-y-4 p-3 overflow-y-auto scrollbar-thumb-blue scrollbar-thumb-rounded scrollbar-track-blue-lighter scrollbar-w-2 scrolling-touch">
                
                <div id="chat">
                </div>

                <div>
                    <div class="border-t-2 border-gray-200 px-4 pt-4 mb-2 sm:mb-0">
                    <div class="relative flex">
                        <input type="text" id="message" placeholder="Message" class="w-full focus:outline-none focus:placeholder-gray-400 text-gray-600 placeholder-gray-600 pl-8 bg-gray-200 rounded-full py-3">
                        <div class="absolute right-0 items-center inset-y-0 hidden sm:flex">
                            <button type="button" id="send_button" class="inline-flex items-center justify-center rounded-full h-12 w-12 transition duration-500 ease-in-out text-white bg-blue-500 hover:bg-blue-400 focus:outline-none">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-6 w-6 transform rotate-90">
                                <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Username Modal -->
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full" id="overlay">
        <div class="relative top-1/3 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="mt-3 text-lg leading-6 font-medium text-gray-900">Enter name</h3>
                <div class="mt-2 px-7 py-3">
                    
                </div>
                <div>
                    <div class="mt-1 relative rounded-md shadow-sm">
                      <input type="text" name="username" id="username" class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md" placeholder="Name">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/static/js/reconnecting_websocket.js"></script>
<script>

    let socket = null;
    let online_status = `<svg xmlns="http://www.w3.org/2000/svg" class="text-green-500 h-8 w-8" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>`
    let offline_status = `<svg xmlns="http://www.w3.org/2000/svg" class="text-red-500 h-8 w-8" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" /></svg>`

    let initialized = false;
    let name = "";

    function onlyLettersAndSpaces(str) {
        return /^[A-Za-z\s]*$/.test(str);
    }

    let COLORS = ["red", "green", "blue", "orange", "indigo", "lime", "cyan", "fuchsia", "rose"];
    function randomColor(){
        return COLORS[Math.floor(Math.random() * COLORS.length)]
    }

    function initializeWebsockets(){
        socket = new ReconnectingWebSocket("ws://127.0.0.1:8000/connect", null, {reconnectInterval: 1000});
        
        socket.onopen = () => {
            console.log("Connection successful")
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = username.value;
            socket.send(JSON.stringify(jsonData));

            socket.send(JSON.stringify({"action": "get_users"}))
            document.getElementById("status").innerHTML = online_status;
        }

        socket.onclose = () => {
            console.log("Connection closed")
            document.getElementById("status").innerHTML = offline_status;
        }

        socket.onerror = error => {
            console.log("Socket error: ", error)
            document.getElementById("status").innerHTML = offline_status;
        }


        socket.onmessage = msg => {
            let data = JSON.parse(msg.data);

            switch (data.action) {
                case "list_users":
                    let ul = document.getElementById("userlist");
                    // Empty list
                    while (ul.firstChild) ul.removeChild(ul.firstChild);

                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach( item => {
                            let color = randomColor();
                            let el = `<li class="flex items-center rounded-lg m-1 p-1 hover:bg-gray-200 transition-colors">
                        <div class="flex items-center justify-center h-8 w-8 bg-${color}-200 rounded-full">${item.charAt(0).toUpperCase()}</div>
                        <span class="pl-3">${item}</span></li>`;
                    
                            var htmlObject = document.createElement('div');
                            htmlObject.innerHTML = el;

                            ul.appendChild(htmlObject);
                        })
                    }
                    break;
                
                case "broadcast":
                    let child;
                    if(data.user == name){
                        child = `<div class="chat-message my-1">
                                    <div class="flex items-end justify-end">
                                        <div class="flex flex-col space-y-2 text-xs max-w-xs mx-2 order-1 items-end">
                                            <div><span class="px-4 py-2 rounded-lg inline-block rounded-br-none bg-blue-500 text-white text-sm">${data.message}</span></div>
                                        </div>
                                    </div>
                                </div>`;
                    }else{
                        child = `<div class="chat-message my-1">
                                    <div class="flex items-end">
                                        <div class="flex flex-col space-y-2 text-xs max-w-xs mx-2 order-2 items-start">
                                            <div><span class="px-4 py-2 rounded-lg inline-block rounded-bl-none bg-gray-200 text-gray-600">
                                                <div class="user text-sm">${data.user}</div>
                                                <div class="message text-sm">${data.message}</div>
                                            </span></div>
                                        </div>
                                    </div>
                                </div>`;
                    }
                    
                    var htmlObject = document.createElement('div');
                    htmlObject.innerHTML = child;
                    document.getElementById("chat").appendChild(htmlObject);
                    break;

            }
        }
    }


    window.onbeforeunload = () => {
        let jsonData = {"action": "left"};
        socket.send(JSON.stringify(jsonData));
    }

    document.addEventListener("DOMContentLoaded", function(){

        let overlay = document.getElementById("overlay");
        let username = document.getElementById("username");

        window.onkeydown = function(event) {
            if(!initialized && (event.keyCode == 9 || event.keyCode == 13)) {
                if(username.value != "" && onlyLettersAndSpaces(username.value)) {
                    // Initialize sockets and send username
                    name = username.value;
                    initializeWebsockets()
                    initialized = true;
                    overlay.style.display = "none";
                }
            }
        }
    })

    document.getElementById("message").addEventListener("keydown", function(event){
        if(event.code == "Enter"){
            if(socket){
                event.preventDefault();
                event.stopPropagation();
                sendMessage();
                return true;
            }
            return false;
        }
    })

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = name;
        jsonData["message"] = document.getElementById("message").value;
        socket.send(JSON.stringify(jsonData))
        
        // Clear message
        document.getElementById("message").value = ""
    }
    
</script>

</body>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

</html>